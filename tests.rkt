#lang racket

(require redex "main.rkt")


(test-equal (term (eval-stackful 2)) 2)
(test-equal (term (eval-stackful (raises 1))) (term stuck))
(test-equal (term (interpret-stack a ((a s0) (b s1)) ((s0 1) (s1 2)))) (term (1 ((s0 1) (s1 2)))))
(test-equal (term (interpret-stack (+ 1 5) () ())) (term (6 ())))
(test-equal (term (interpret-stack (+ 1 5 (+ 2 3)) () ())) (term (11 ())))
(test-equal (term (eval-stackful (+ 1 true))) (term stuck))
(test-equal (term (eval-stackful (+ 1 (+ 2 true)))) (term stuck))
(test-equal (term (eval-stackful (begin 1))) 1)
(test-equal (term (eval-stackful (begin 1 2))) 2)
(test-equal (term (eval-stackful (begin 1 (+ 2 3)))) 5)
(test-equal (term (eval-stackful (lambda (x) 3))) (term (closure x 3 ())))
(test-equal (term (interpret-stack (lambda (x) 3) ((a s0)) ((s0 1)))) (term ((closure x 3 ((a s0))) ((s0 1)))))
(test-equal (term (eval-stackful (+ 2 (* 3 2)))) 8)
(test-equal (term (eval-stackful (if true 3 -3))) 3)
(test-equal (term (eval-stackful (if false 3 -3))) -3)
(test-equal (term (eval-stackful (if (< 0 1) 3 -3))) 3)
(test-equal (term (eval-stackful (let-values (((a) 1)) 3))) 3)
(test-equal (term (eval-stackful (let-values (((a) 1)) a))) 1)
(test-equal (term (eval-stackful (let-values (((a) (+ 1 2))) a))) 3)
(test-equal (term (eval-stackful (let-values (((a) (+ 1 2)) ((b) 4)) (* a b)))) 12)
(test-equal (term (interpret-stack (set! a 35) ((a s0)) ((s0 1)))) (term ((void) ((s0 35)))))
(test-equal (term (eval-stackful (let-values (((a) 1)) (begin (set! a 35) a)))) 35)
(test-equal (term (eval-stackful (let-values (((a) (+ 1 2))) (let-values (((b) (begin (set! a 1) 4))) (* a b))))) 4)
(test-equal (term (eval-stackful (let-values (((a) (lambda (n) n))) (a 3)))) 3)
(test-equal (term (eval-stackful (let-values (((a) (lambda (n) n))) (a (+ 3 2))))) 5)
(test-equal (term (eval-stackful (let-values (((a) (lambda (n) (if (< n 1) 1 3)))) (a 5)))) 3)
(test-equal (term (eval-stackful (letrec-values (((a) 1)) 3))) 3)
(test-equal (term (eval-stackful (letrec-values (((a) 1)) a))) 1)
(test-equal (term (eval-stackful (letrec-values (((a) (lambda (n) n))) 3))) 3)
(test-equal (term (eval-stackful (letrec-values (((a) (lambda (n) (if (< n 1) 1 0)))) 1))) 1)
(test-equal (term (eval-stackful (letrec-values (((a) (lambda (n) (if (< n 1) 1 (a 0))))) (a 5)))) 1)
(test-equal (term (eval-stackful (letrec-values (((fact) (lambda (n) (if (< n 1) 1 (* n (fact (sub1 n)))))))
                                   (fact 5)))) 120)
